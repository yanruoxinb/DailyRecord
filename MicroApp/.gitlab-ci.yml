services:
  - name: docker:18.09.7-dind
    command: ["--registry-mirror=https://cbmiolsi.mirror.aliyuncs.com"]


stages:
  - build
  - package
  - deploy

variables:
  CONTAINER_IMAGE: $CI_DOCKER_MLAMP_REGISTRY/cem/$CI_PROJECT_NAME
  K8S_API_URL: https://k8s.nb.sre.miaozhen.com:8443

build-dev:
  stage: build
  only:
    - develop
  tags:
    - nb-cem-6-shell
  image: node:lts-alpine
  artifacts:
    paths:
      - ./dist/
    expire_in: 1 hrs
  script:
    - npm --registry=http://registry.npm.mlamp.io ci
    - CI=false npm run build

build-dev-docker:
  stage: package
  only:
    - develop
  tags:
    - nb-cem-6-shell
  dependencies:
    - build-dev
  before_script:
    - TAG="dev"
    - docker login -u $CI_DOCKER_MLAMP_REGISTRY_USER -p $CI_DOCKER_MLAMP_REGISTRY_PWD $CI_DOCKER_MLAMP_REGISTRY
  script:
    - docker pull $CONTAINER_IMAGE:$TAG || true
    - docker build --cache-from $CONTAINER_IMAGE:dev --tag $CONTAINER_IMAGE:$TAG .
    - docker push $CONTAINER_IMAGE:$TAG

deploy-dev:
  image: $CI_DOCKER_MLAMP_REGISTRY/cem/kubectl:v1.0.0
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  stage: deploy
  tags:
    - nb-cem-6
  only:
    - develop
  before_script:
    - TAG="dev"
    - DEPLOYMENT_NAME=`echo "$CI_PROJECT_NAME-dev-deployment" | sed 's/\./-/g'`
    - SVC_NAME=`echo "$CI_PROJECT_NAME-dev-svc" | sed 's/\./-/g'`
  script:
    - DEVIMAGE="$CI_DOCKER_MLAMP_REGISTRY/cem/$CI_PROJECT_NAME:$TAG"
    # 检查集群中是否存在deployment, 不存在则创建
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_DEV_TOKEN" get deployment $DEPLOYMENT_NAME -n cem-dev --insecure-skip-tls-verify 2>/dev/null ||  kubectl --server="${K8S_API_URL}" --token=$CI_K8S_DEV_TOKEN --insecure-skip-tls-verify apply -f ./deploy/k8s/dev/deployment.yml
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_DEV_TOKEN" get services $SVC_NAME -n cem-dev --insecure-skip-tls-verify 2>/dev/null ||  kubectl --server="${K8S_API_URL}" --token=$CI_K8S_DEV_TOKEN --insecure-skip-tls-verify apply -f ./deploy/k8s/dev/service.yml
    # 触发更新
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_DEV_TOKEN" --insecure-skip-tls-verify patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" -n cem-dev

build-test:
  stage: build
  only:
    - test
  tags:
    - nb-cem-6-shell
  image: node:lts-alpine
  artifacts:
    paths:
      - ./dist/
    expire_in: 1 hrs
  script:
    - npm --registry=http://registry.npm.mlamp.io ci
    - CI=false npm run build

build-test-docker:
  stage: package
  only:
    - test
  tags:
    - nb-cem-6-shell
  dependencies:
    - build-test
  before_script:
    - TAG="test"
    - docker login -u $CI_DOCKER_MLAMP_REGISTRY_USER -p $CI_DOCKER_MLAMP_REGISTRY_PWD $CI_DOCKER_MLAMP_REGISTRY
  script:
    - docker pull $CONTAINER_IMAGE:$TAG || true
    - docker build --cache-from $CONTAINER_IMAGE:test --tag $CONTAINER_IMAGE:$TAG .
    - docker push $CONTAINER_IMAGE:$TAG

deploy-test:
  image: $CI_DOCKER_MLAMP_REGISTRY/cem/kubectl:v1.0.0
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  stage: deploy
  when: manual
  tags:
    - nb-cem-6
  only:
    - test
  before_script:
    - TAG="test"
    - DEPLOYMENT_NAME=`echo "$CI_PROJECT_NAME-test-deployment" | sed 's/\./-/g'`
    - SVC_NAME=`echo "$CI_PROJECT_NAME-test-svc" | sed 's/\./-/g'`
  script:
    - DEVIMAGE="$CI_DOCKER_MLAMP_REGISTRY/cem/$CI_PROJECT_NAME:$TAG"
    # 检查集群中是否存在deployment, 不存在则创建
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_DEV_TOKEN" get deployment $DEPLOYMENT_NAME -n cem-dev --insecure-skip-tls-verify 2>/dev/null ||  kubectl --server="${K8S_API_URL}" --token=$CI_K8S_DEV_TOKEN --insecure-skip-tls-verify apply -f ./deploy/k8s/test/deployment.yml
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_DEV_TOKEN" get services $SVC_NAME -n cem-dev --insecure-skip-tls-verify 2>/dev/null ||  kubectl --server="${K8S_API_URL}" --token=$CI_K8S_DEV_TOKEN --insecure-skip-tls-verify apply -f ./deploy/k8s/test/service.yml
    # 触发更新
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_DEV_TOKEN" --insecure-skip-tls-verify patch deployment $DEPLOYMENT_NAME -p "{\"spec\":{\"template\":{\"metadata\":{\"labels\":{\"date\":\"`date +'%s'`\"}}}}}" -n cem-dev

build:
  stage: build
  only:
    - tags
  tags:
    - nb-cem-6-shell
  image: node:lts-alpine
  artifacts:
    paths:
      - ./dist/
    expire_in: 1 hrs
  script:
    - npm --registry=http://registry.npm.mlamp.io ci
    - CI=false npm run build

build-docker:
  stage: package
  only:
    - tags
  tags:
    - nb-cem-6-shell
  dependencies:
    - build
  before_script:
    - docker login -u $CI_DOCKER_MLAMP_REGISTRY_USER -p $CI_DOCKER_MLAMP_REGISTRY_PWD $CI_DOCKER_MLAMP_REGISTRY
  script:
    - docker build --cache-from $CONTAINER_IMAGE:latest --tag $CONTAINER_IMAGE:$CI_COMMIT_TAG --tag $CONTAINER_IMAGE:latest .
    - docker push $CONTAINER_IMAGE:$CI_COMMIT_TAG
    - docker push $CONTAINER_IMAGE:latest

deploy:
  image: $CI_DOCKER_MLAMP_REGISTRY/cem/kubectl:v1.0.0
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_DRIVER: overlay2
  stage: deploy
  when: manual
  tags:
    - nb-cem-6
  only:
    - tags
  before_script:
    - DEPLOYMENT_NAME=$CI_PROJECT_NAME-deployment
    - SVC_NAME=`echo "$CI_PROJECT_NAME-svc" | sed 's/\./-/g'`
  script:
  
    - IMAGE="$CI_DOCKER_MLAMP_REGISTRY/cem/$CI_PROJECT_NAME:$CI_COMMIT_TAG"
    # 检查集群中是否存在deployment, 不存在则创建
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_PROD_TOKEN" get deployment $DEPLOYMENT_NAME -n cem --insecure-skip-tls-verify 2>/dev/null ||  kubectl --server="${K8S_API_URL}" --token=$CI_K8S_PROD_TOKEN --insecure-skip-tls-verify apply -f ./deploy/k8s/prod/deployment.yml
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_PROD_TOKEN" get services $SVC_NAME -n cem --insecure-skip-tls-verify 2>/dev/null ||  kubectl --server="${K8S_API_URL}" --token=$CI_K8S_PROD_TOKEN --insecure-skip-tls-verify apply -f ./deploy/k8s/prod/service.yml
    # 触发更新
    - kubectl --server="${K8S_API_URL}" --token="$CI_K8S_PROD_TOKEN" --insecure-skip-tls-verify set image deploy $CI_PROJECT_NAME-deployment *=$IMAGE -n cem
